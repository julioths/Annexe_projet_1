from manim import *
import random,math,numpy as np

class EpidemicSimulation(Scene):

 def construct(self):

  RAYON=5
  N=50
  N_INFECTES_INIT=3
  R_INFECTION=0.5

  P_INFECTION=0.5
  P_DEPLACEMENT=0.3
  P_E_VERS_I=0.2
  P_GUERISON=0.2
  PAS=30
  N_SIMULATIONS=100
  historiques_I,historiques_S,historiques_E=[],[],[]

  for sim in range(N_SIMULATIONS):

   points,etats,positions_init=[],[],[]
   hist_I,hist_S,hist_E=[],[],[]
   angle_step=TAU/N

   for i in range(N):
    angle=i*angle_step
    pos=RAYON*np.array([math.cos(angle),math.sin(angle),0])
    dot=Dot(point=pos,color=GREEN,radius=0.1)
    points.append(dot)
    positions_init.append(pos)
    etats.append("S")

   for idx in random.sample(range(N),N_INFECTES_INIT):
    points[idx].set_color(YELLOW)
    etats[idx]="E"

   if sim==0:
    compteur=Integer(number=0,font_size=36).to_corner(UP+RIGHT)
    label=Text("Infectes:",font_size=30).next_to(compteur,LEFT)
    self.add(*points,label,compteur)

   
   
   def compter():
    return(sum(s=="I"for s in etats),sum(s=="S"for s in etats),sum(s=="E"for s in etats))


   ni,ns,ne=compter()
   hist_I.append(ni)
   hist_S.append(ns)
   hist_E.append(ne)
   if sim==0:compteur.set_value(ni)

   def maj_points():
    animations=[]
    etats_nouveaux=etats[:]
    positions_futures=[]

    for i,dot in enumerate(points):
     pos=dot.get_center()
     cible=ORIGIN if(np.allclose(pos,positions_init[i])and random.random()<P_DEPLACEMENT)else positions_init[i]
     positions_futures.append(cible)
     if sim==0:
      animations.append(UpdateFromAlphaFunc(dot,lambda m,alpha,d=pos,a=cible:m.move_to(interpolate(d,a,alpha))))

    for i in range(N):
     if etats[i]!="I":continue
     for j in range(N):
      if etats[j]=="S":
       dist=np.linalg.norm(positions_futures[i]-positions_futures[j])
       if dist<R_INFECTION and random.random()<P_INFECTION:
        etats_nouveaux[j]="E"

    for i in range(N):
     if etats[i]=="E"and random.random()<P_E_VERS_I:
      etats_nouveaux[i]="I"
     elif etats[i]=="I"and random.random()<P_GUERISON:
      etats_nouveaux[i]="R"

    return animations,etats_nouveaux

   for _ in range(PAS):
    animations,nouveaux=maj_points()
    if sim==0:self.play(*animations,run_time=0.5)
    for i,etat in enumerate(nouveaux):
     if etat!=etats[i]:
      etats[i]=etat
      points[i].set_color({"S":GREEN,"E":YELLOW,"I":RED,"R":BLUE}[etat])
    ni,ns,ne=compter()
    hist_I.append(ni)
    hist_S.append(ns)
    hist_E.append(ne)
    if sim==0:compteur.set_value(ni)

   historiques_I.append(hist_I)
   historiques_S.append(hist_S)
   historiques_E.append(hist_E)

  
  
  
  def moyenne(hist):
   return[sum(h[i]for h in hist)/N_SIMULATIONS for i in range(PAS+1)]





  I_moy,S_moy,E_moy=moyenne(historiques_I),moyenne(historiques_S),moyenne(historiques_E)
  S,E,I,R=[N-N_INFECTES_INIT],[N_INFECTES_INIT],[0.0],[0.0]
  beta=(P_DEPLACEMENT**2)*19*P_INFECTION
  sigma=P_E_VERS_I
  gamma=P_GUERISON

  for _ in range(PAS):
   s,e,i,r=S[-1],E[-1],I[-1],R[-1]
   new_E=beta*s*i/N
   new_I=sigma*e
   new_R=gamma*i
   S.append(s-new_E)
   E.append(e+new_E-new_I)
   I.append(i+new_I-new_R)
   R.append(r+new_R)

  self.clear()

  def tracer_courbe(titre,sim_data,model_data,col_sim,col_mod,ylabel):
   axes=Axes(x_range=[0,PAS],y_range=[0,N],axis_config={"include_numbers":True}).scale(0.8).to_edge(DOWN);labels=axes.get_axis_labels("Temps",ylabel)
   courbe_sim=axes.plot_line_graph(x_values=range(PAS+1),y_values=sim_data,line_color=col_sim,add_vertex_dots=False);courbe_mod=axes.plot_line_graph(x_values=range(PAS+1),y_values=model_data,line_color=col_mod,add_vertex_dots=False)
   legende=VGroup(Dot(color=col_sim),Text(f"Sim {ylabel[0]}",font_size=24),Dot(color=col_mod),Text(f"Mod {ylabel[0]}",font_size=24)).arrange_in_grid(rows=1,cols=4,buff=0.3).next_to(axes,DOWN)
   self.play(Create(axes),Write(labels))
   self.play(Create(courbe_sim),Create(courbe_mod),FadeIn(legende))
   self.wait(10)
   self.clear()

  tracer_courbe("Infectes",I_moy,I,RED,BLUE,"Infectes")
  tracer_courbe("Sains",S_moy,S,GREEN,YELLOW,"Sains")
  tracer_courbe("Exposes",E_moy,E,ORANGE,PURPLE,"Exposes")

       
        creer_graphe("Infectes", moyenne_infections, I, RED, BLUE, "Infectes")
        creer_graphe("Sains",moyenne_sains,S, GREEN, YELLOW, "Sains")
        creer_graphe("Exposes",moyenne_exposes,E, ORANGE, PURPLE, "Exposes")
